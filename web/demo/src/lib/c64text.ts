import { BLU, get_render_buffer, GRN, onScreen, RED } from './pixels';
import { eol } from './text';

/**
 * C64 character map does not map entirely to ASCII (chars are from 0-31)
 *
 * @param chr Character tp map
 * @returns C64 charmap index
 */
function asciiToC64(chr: string): number {
  if (chr >= '@' && chr <= 'Z') {
    return chr.charCodeAt(0) - '@'.charCodeAt(0);
  }
  // This range matches ASCII
  if (chr >= ' ' && chr <= '?') {
    return chr.charCodeAt(0);
  }
  // Outside range => space
  return 32;
}

function render_char(buf: Uint8Array, x: number, y: number, chr: number, fg?: number, bg?: number) {
  // Default colors if not set
  fg = fg || 0xff8804;
  bg = bg || 0xaa0004;

  const col = [
    [bg & 0xff, (bg >> 8) & 0xff, (bg >> 16) & 0xff], // Background
    [fg & 0xff, (fg >> 8) & 0xff, (fg >> 16) & 0xff] // Foreground
  ];
  const draw = [bg !== -1, fg !== -1];

  for (let line = 0; line < 8; line++) {
    const chr_line = c64_font2[chr * 8 + line];
    const py = y + line;
    for (let b = 0; b < 8; b++) {
      const bit = (chr_line >> (7 - b)) & 1;
      const px = x + b;
      if (onScreen(px, py) && draw[bit]) {
        buf[RED(px, py)] = col[bit][0];
        buf[GRN(px, py)] = col[bit][1];
        buf[BLU(px, py)] = col[bit][2];
      }
    }
  }
}

// Text test demo
export function render_text_c64(
  buf: Uint8Array,
  x: number,
  y: number,
  text: string,
  fg?: number,
  bg?: number
) {
  for (let jsc = 0; !eol(text, jsc); jsc++) {
    const chr = asciiToC64(text[jsc]);
    render_char(buf, x + jsc * 8, y, chr, fg, bg);
  }
}

// Font from http://home-2002.code-cop.org/c64/font_01.html
// Convert 64c files using https://gchq.github.io/CyberChef/#recipe=Drop_bytes(0,2,false)To_Hex('Space',8)To_Binary('Space',8/disabled)Find_/_Replace(%7B'option':'Regex','string':'(%5B0-9a-f%5D%2B)'%7D,'0x$1,',true,false,true,false)
const c64_font = [
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xfe, 0xc6, 0xc6, 0xfe, 0xfe, 0xc6, 0x00,
  0xfc, 0xfe, 0xc6, 0xfc, 0xc6, 0xfe, 0xfc, 0x00, 0x7e, 0xfe, 0xc0, 0xc0, 0xc0, 0xfe, 0x7e, 0x00,
  0xfc, 0xfe, 0xc6, 0xc6, 0xc6, 0xfe, 0xfc, 0x00, 0x7e, 0xfe, 0xc0, 0xfe, 0xc0, 0xfe, 0x7e, 0x00,
  0x7e, 0xfe, 0xc0, 0xfc, 0xfc, 0xc0, 0xc0, 0x00, 0x7e, 0xfe, 0xc0, 0xce, 0xc6, 0xfe, 0x7c, 0x00,
  0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00,
  0xfe, 0xfe, 0x18, 0x18, 0x18, 0xf8, 0xf0, 0x00, 0xc6, 0xce, 0xdc, 0xf8, 0xdc, 0xce, 0xc6, 0x00,
  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xfe, 0xfe, 0x00, 0xc6, 0xee, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0x00,
  0xfc, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x3c, 0x7e, 0xe7, 0xc3, 0xe7, 0x7e, 0x3c, 0x00,
  0xfc, 0xfe, 0xc6, 0xfe, 0xfc, 0xc0, 0xc0, 0x00, 0x3c, 0x7e, 0xe7, 0xc3, 0xef, 0x7e, 0x3e, 0x06,
  0xfc, 0xfe, 0xc6, 0xfe, 0xfc, 0xde, 0xce, 0x00, 0x7e, 0xfe, 0xc0, 0x7c, 0x0e, 0xfe, 0xfc, 0x00,
  0x7e, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0x7e, 0x00,
  0xc6, 0xc6, 0xee, 0x6c, 0x7c, 0x38, 0x38, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xc6, 0x00,
  0xc6, 0xec, 0x7c, 0x38, 0x7c, 0xee, 0xc6, 0x00, 0xc6, 0xee, 0x7c, 0x38, 0x38, 0x38, 0x38, 0x00,
  0xfe, 0xfe, 0x18, 0x30, 0x60, 0xfe, 0xfe, 0x00, 0xff, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa,
  0xaa, 0xaa, 0xaa, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x7c, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0x7c, 0x18, 0x78, 0x78, 0x18, 0x18, 0x18, 0x7e, 0x7e,
  0x7c, 0xfe, 0xc6, 0x1e, 0x78, 0xe0, 0xfe, 0xfe, 0xfe, 0xfe, 0x06, 0x1c, 0x1e, 0xc6, 0xfe, 0x7c,
  0x1c, 0x3c, 0x7c, 0xec, 0xcc, 0xfe, 0xfe, 0x0c, 0xfe, 0xfe, 0xc0, 0xfc, 0xfe, 0x06, 0xfe, 0xfc,
  0x7c, 0xfc, 0xc0, 0xfc, 0xfe, 0xc6, 0xfe, 0x7c, 0xfe, 0xfe, 0x06, 0x1e, 0x1c, 0x38, 0x38, 0x30,
  0x7c, 0xfe, 0xc6, 0xfe, 0xfe, 0xc6, 0xfe, 0x7c, 0x7c, 0xfe, 0xc6, 0xfe, 0x7e, 0x06, 0xfe, 0x7c,
  0xf0, 0x00, 0xff, 0xe0, 0x00, 0xff, 0xc0, 0x00, 0xff, 0x80, 0x00, 0xff, 0x00, 0x00, 0xfe, 0x00,
  0x00, 0xfc, 0x00, 0x00, 0xf8, 0x00, 0x00, 0xf0, 0x00, 0x00, 0xe0, 0x00, 0x00, 0xe0, 0x00, 0x00,
  0xc0, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc
];

const c64_font2 = [
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xfe, 0xc6, 0xe6, 0xe6, 0x00,
  0xfc, 0xc6, 0xc6, 0xfc, 0xe6, 0xe6, 0xfc, 0x00, 0xfe, 0xc6, 0xc0, 0xc0, 0xe0, 0xe6, 0xfe, 0x00,
  0xf8, 0xcc, 0xc6, 0xc6, 0xe6, 0xe6, 0xfe, 0x00, 0xfe, 0xc0, 0xc0, 0xf8, 0xe0, 0xe0, 0xfe, 0x00,
  0xfe, 0x00, 0xc0, 0xf8, 0xe0, 0xe0, 0xe0, 0x00, 0xfe, 0xc6, 0xc0, 0xce, 0xe6, 0xe6, 0xfe, 0x00,
  0xc6, 0xc6, 0xc6, 0xfe, 0xe6, 0xe6, 0xe6, 0x00, 0x7c, 0x30, 0x30, 0x30, 0x38, 0x38, 0x7c, 0x00,
  0x1e, 0x0c, 0x0c, 0x0c, 0x1c, 0xdc, 0x78, 0x00, 0xc6, 0xcc, 0xd8, 0xd0, 0xf8, 0xec, 0xe6, 0x00,
  0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xfe, 0x00, 0xc6, 0xee, 0xfe, 0xd6, 0xe6, 0xe6, 0xe6, 0x00,
  0xc6, 0xd6, 0xde, 0xde, 0xee, 0xe6, 0xe6, 0x00, 0xfe, 0xc6, 0xc6, 0xe6, 0xe6, 0xe6, 0xfe, 0x00,
  0xfe, 0xc6, 0xc6, 0xfe, 0xe0, 0xe0, 0xe0, 0x00, 0xfe, 0xc6, 0xc6, 0xc6, 0xee, 0xee, 0xff, 0x00,
  0xfe, 0xc6, 0xc6, 0xfe, 0xf8, 0xec, 0xe6, 0x00, 0xfe, 0xc6, 0xc0, 0xfe, 0x06, 0xe6, 0xfe, 0x00,
  0xfe, 0x30, 0x30, 0x30, 0x38, 0x38, 0x38, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xe6, 0xe6, 0xfe, 0x00,
  0xc6, 0xc6, 0xc6, 0xe6, 0xe6, 0xfe, 0x7c, 0x00, 0xc6, 0xc6, 0xd6, 0xde, 0xee, 0xe6, 0xe6, 0x00,
  0xc6, 0xc6, 0x7c, 0x38, 0x7c, 0xe6, 0xe6, 0x00, 0xc6, 0xc6, 0xc6, 0x7c, 0x30, 0x38, 0x38, 0x00,
  0xfe, 0x06, 0x0c, 0x38, 0x70, 0xe0, 0xfe, 0x00, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e,
  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00, 0x10, 0x30, 0x7f, 0x7f, 0x30, 0x10, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x38, 0x00, 0x38, 0x38, 0x00,
  0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0xff, 0x66, 0xff, 0x66, 0x66, 0x00,
  0x18, 0x3e, 0x60, 0x3c, 0x06, 0x7c, 0x18, 0x00, 0x62, 0x66, 0x0c, 0x18, 0x30, 0x66, 0x46, 0x00,
  0x3c, 0x66, 0x3c, 0x38, 0x67, 0x66, 0x3f, 0x00, 0x06, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0c, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00,
  0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x70, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x03, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00,
  0x7c, 0xc6, 0xce, 0xd6, 0xe6, 0xe6, 0x7c, 0x00, 0x30, 0x70, 0x70, 0x30, 0x38, 0x38, 0xfe, 0x00,
  0x7c, 0xe6, 0x06, 0x0c, 0x70, 0xe0, 0xfe, 0x00, 0x7c, 0xc6, 0x06, 0x1c, 0x06, 0xc6, 0x7c, 0x00,
  0x1e, 0x36, 0x66, 0xc6, 0xff, 0x06, 0x06, 0x00, 0xfe, 0xc0, 0xfc, 0x06, 0x06, 0xe6, 0xfc, 0x00,
  0x7c, 0xc6, 0xc0, 0xfc, 0xe6, 0xe6, 0x7c, 0x00, 0xfe, 0xc6, 0x0c, 0x30, 0x30, 0x38, 0x38, 0x00,
  0x7c, 0xc6, 0xc6, 0x7c, 0xe6, 0xe6, 0x7c, 0x00, 0x7c, 0xc6, 0xc6, 0x7e, 0x06, 0xe6, 0x7c, 0x00,
  0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x18, 0x30,
  0x0e, 0x18, 0x30, 0xe0, 0x70, 0x38, 0x1e, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x7e, 0x00, 0x00, 0x00,
  0x70, 0x18, 0x0c, 0x07, 0x0e, 0x1c, 0x78, 0x00
];
